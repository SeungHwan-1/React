{"ast":null,"code":"var _jsxFileName = \"C:\\\\20240801-gangnam\\\\07_REACT\\\\03_hooks\\\\src\\\\01_useEffect\\\\01_useEffect-basic.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\n/*\r\n    Hooks는 리액트에 새로 도입된 기능으로, 함수 컴포넌트에서 사용 불가능한\r\n    생명 주기 메소드의 한계점으로 인해 상태 관리 및 렌더링 이후 시점 컨트롤 등\r\n    다양한 문제를 해결하기 위해 만든 함수 집합을 의미한다.\r\n\r\n    그 중 useState는 가장 기본적인 hook이며, 함수 컴포넌트에서도 상태를 관리할 수 있게 해준다.\r\n    state를 다룰 때 이용해봤기 때문에 해당 부분은 생략한다.\r\n\r\n    컴포넌트가 렌더링 된 이후 특정 작업을 수행할 필요가 있다면 클래스형 컴포넌트에서는\r\n    componentDidMount 혹은 componentDidUpdate 메소드를 이용하면 된다.\r\n    하지만, 함수형 컴포넌트에서는 생명주기 사용이 불가능하다.\r\n    그렇기에 함수형 컴포넌트에서도 렌더링된 이후 시점에 슈행할 내용이 필요한 경우,\r\n    사용할 수 있는 기능을 제공하고 있고, 그것이 바로 useEffect이다.\r\n*/\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UseEffectBasic = ({\n  message\n}) => {\n  _s();\n  console.log(\"렌더링\");\n  useEffect(() => {\n    console.log(\"렌더링 이후 동작\");\n    console.log(message);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(\"렌더링 시 출력\"), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(UseEffectBasic, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = UseEffectBasic;\nexport default UseEffectBasic;\nvar _c;\n$RefreshReg$(_c, \"UseEffectBasic\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","UseEffectBasic","message","_s","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/20240801-gangnam/07_REACT/03_hooks/src/01_useEffect/01_useEffect-basic.js"],"sourcesContent":["import {useEffect} from \"react\";\r\n/*\r\n    Hooks는 리액트에 새로 도입된 기능으로, 함수 컴포넌트에서 사용 불가능한\r\n    생명 주기 메소드의 한계점으로 인해 상태 관리 및 렌더링 이후 시점 컨트롤 등\r\n    다양한 문제를 해결하기 위해 만든 함수 집합을 의미한다.\r\n\r\n    그 중 useState는 가장 기본적인 hook이며, 함수 컴포넌트에서도 상태를 관리할 수 있게 해준다.\r\n    state를 다룰 때 이용해봤기 때문에 해당 부분은 생략한다.\r\n\r\n    컴포넌트가 렌더링 된 이후 특정 작업을 수행할 필요가 있다면 클래스형 컴포넌트에서는\r\n    componentDidMount 혹은 componentDidUpdate 메소드를 이용하면 된다.\r\n    하지만, 함수형 컴포넌트에서는 생명주기 사용이 불가능하다.\r\n    그렇기에 함수형 컴포넌트에서도 렌더링된 이후 시점에 슈행할 내용이 필요한 경우,\r\n    사용할 수 있는 기능을 제공하고 있고, 그것이 바로 useEffect이다.\r\n*/\r\n\r\nconst UseEffectBasic = ({message}) =>\r\n{\r\n    console.log(\"렌더링\");\r\n    useEffect(() => \r\n        {\r\n            console.log(\"렌더링 이후 동작\");\r\n            console.log(message);\r\n        });\r\n    return (\r\n        <>\r\n            {console.log(\"렌더링 시 출력\")}\r\n            <h1>{message}</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UseEffectBasic;"],"mappings":";;AAAA,SAAQA,SAAS,QAAO,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAeA,MAAMC,cAAc,GAAGA,CAAC;EAACC;AAAO,CAAC,KACjC;EAAAC,EAAA;EACIC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAClBT,SAAS,CAAC,MACN;IACIQ,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxBD,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;EACxB,CAAC,CAAC;EACN,oBACIJ,OAAA,CAAAE,SAAA;IAAAM,QAAA,GACKF,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,eACxBP,OAAA;MAAAQ,QAAA,EAAKJ;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA,eACpB,CAAC;AAEX,CAAC;AAAAP,EAAA,CAdKF,cAAc;AAAAU,EAAA,GAAdV,cAAc;AAgBpB,eAAeA,cAAc;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}