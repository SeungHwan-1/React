{"ast":null,"code":"var _s = $RefreshSig$();\n/*\r\n    useRef 를 사용하는 목적\r\n\r\n    1. 값 유지 - 렌더링 사이에 값을 유지할 수 있게 해준다 리렌더링 시 초기화 되지않는다\r\n    2. 렌더링 방지 값이 변경 되더라도 리렌더링을 일으키지 않는다 성능 최적화\r\n    3. 애니메이션, 타이머 등 특정 값이 변경 되더라도 리렌더링을 원치 않을 때 저장 용도\r\n    4. dom 요소에 직접 접근하는 방법을 제공함 특정 요소 포커스 등\r\n*/\n\nimport { useState, useRef } from \"react\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UseRefCounter = () => {\n  _s();\n  console.log(\"useRefCounter 렌더링 됨\");\n  const [count, setCount] = useState(0);\n  let variable = 0;\n  const countRef = useRef(0);\n  const increseCount = () => {\n    setCount(count + 1);\n  };\n  const increseVariable = () => {\n    variable += 1;\n    console.log(\"variable :\" + variable);\n  };\n  const increseCountRef = () => {\n    countRef.current = countRef.current + 1;\n    console.log(\"카운트ref :\" + countRef.current);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(UseRefCounter, \"fu86g8AOHac3WDNbDli9HV0e80M=\");\n_c = UseRefCounter;\nvar _c;\n$RefreshReg$(_c, \"UseRefCounter\");","map":{"version":3,"names":["useState","useRef","Fragment","_Fragment","jsxDEV","_jsxDEV","UseRefCounter","_s","console","log","count","setCount","variable","countRef","increseCount","increseVariable","increseCountRef","current","_c","$RefreshReg$"],"sources":["C:/20240801-gangnam/07_REACT/03_hooks/src/useRef/02_useRef.js"],"sourcesContent":["\r\n/*\r\n    useRef 를 사용하는 목적\r\n\r\n    1. 값 유지 - 렌더링 사이에 값을 유지할 수 있게 해준다 리렌더링 시 초기화 되지않는다\r\n    2. 렌더링 방지 값이 변경 되더라도 리렌더링을 일으키지 않는다 성능 최적화\r\n    3. 애니메이션, 타이머 등 특정 값이 변경 되더라도 리렌더링을 원치 않을 때 저장 용도\r\n    4. dom 요소에 직접 접근하는 방법을 제공함 특정 요소 포커스 등\r\n*/\r\n\r\nimport { useState , useRef } from \"react\";\r\n\r\nexport const UseRefCounter = () =>{\r\n\r\n    console.log(\"useRefCounter 렌더링 됨\");\r\n\r\n    const [count,setCount] = useState(0);\r\n\r\n    let variable = 0;\r\n\r\n    const countRef = useRef(0);\r\n\r\n    const increseCount = () => {\r\n        setCount(count +1);\r\n    }\r\n    const increseVariable = () =>\r\n    {\r\n        variable +=1;\r\n        console.log(\"variable :\" + variable);\r\n    \r\n    }\r\n    const increseCountRef = ()=> {\r\n        countRef.current = countRef.current+1;\r\n        console.log(\"카운트ref :\" + countRef.current);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAGC,MAAM,QAAQ,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAE9BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAElC,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEpC,IAAIY,QAAQ,GAAG,CAAC;EAEhB,MAAMC,QAAQ,GAAGZ,MAAM,CAAC,CAAC,CAAC;EAE1B,MAAMa,YAAY,GAAGA,CAAA,KAAM;IACvBH,QAAQ,CAACD,KAAK,GAAE,CAAC,CAAC;EACtB,CAAC;EACD,MAAMK,eAAe,GAAGA,CAAA,KACxB;IACIH,QAAQ,IAAG,CAAC;IACZJ,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGG,QAAQ,CAAC;EAExC,CAAC;EACD,MAAMI,eAAe,GAAGA,CAAA,KAAK;IACzBH,QAAQ,CAACI,OAAO,GAAGJ,QAAQ,CAACI,OAAO,GAAC,CAAC;IACrCT,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGI,QAAQ,CAACI,OAAO,CAAC;EAC9C,CAAC;EAED,oBACIZ,OAAA,CAAAF,SAAA,mBACE,CAAC;AAEX,CAAC;AAAAI,EAAA,CA5BYD,aAAa;AAAAY,EAAA,GAAbZ,aAAa;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}