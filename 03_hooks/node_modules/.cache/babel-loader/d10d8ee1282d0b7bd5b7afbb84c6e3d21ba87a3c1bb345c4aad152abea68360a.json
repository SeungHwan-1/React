{"ast":null,"code":"var _jsxFileName = \"C:\\\\20240801-gangnam\\\\07_REACT\\\\03_hooks\\\\src\\\\01_useEffect\\\\04_useEffect-cleanup.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\n\n/*\r\n    useEffect는 기본적으로 랜더링 직후와 업데이트 직후 호출된다.\r\n    컴포넌트가 마운트 해제되기 직전이나 업데이트 되기 전에\r\n    실행할 내용이 있다면 정리 (clean-up)을 할 수 있다.\r\n    이전 effect 내용을 정리하고 난 뒤 새로운 effect가 동작하도록 할 떄 사용된다..\r\n    이전 effect가 남아있는 상태에서 새로운 effect가 발생하게 되면\r\n    마운트 해제가 일어나고 나서도 메모리 누수나 출동이 발생할 가능성이 있다.\r\n*/\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Timer = () => {\n  _s();\n  useEffect(() => {\n    console.log(\"타이머가 시작됨..\");\n    /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this);\n    const timer = setInterval(() => {\n      console.log(new Date().toLocaleTimeString());\n    }, 1000);\n    return () => {\n      clearInterval(timer); //끝나는시점에 한다?\n      console.log(\"타이머 끝남\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"\\uD0C0\\uC774\\uBA38\\uB97C \\uC2DC\\uC791\\uD569\\uB2C8\\uB2E4..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this);\n};\n_s(Timer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Timer;\nexport const Container = () => {\n  _s2();\n  const [isTrue, setIsTure] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsTure(!isTrue);\n      },\n      children: \"\\uD0C0\\uC774\\uBA38 \\uD1A0\\uAE00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), isTrue && /*#__PURE__*/_jsxDEV(Timer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n};\n_s2(Container, \"v39w455sJSvU01LQDayW+hcPK7c=\");\n_c2 = Container;\nvar _c, _c2;\n$RefreshReg$(_c, \"Timer\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Timer","_s","console","log","fileName","_jsxFileName","lineNumber","columnNumber","timer","setInterval","Date","toLocaleTimeString","clearInterval","children","_c","Container","_s2","isTrue","setIsTure","onClick","_c2","$RefreshReg$"],"sources":["C:/20240801-gangnam/07_REACT/03_hooks/src/01_useEffect/04_useEffect-cleanup.js"],"sourcesContent":["import {useState} from \"react\";\r\nimport {useEffect} from \"react\";\r\n\r\n\r\n/*\r\n    useEffect는 기본적으로 랜더링 직후와 업데이트 직후 호출된다.\r\n    컴포넌트가 마운트 해제되기 직전이나 업데이트 되기 전에\r\n    실행할 내용이 있다면 정리 (clean-up)을 할 수 있다.\r\n    이전 effect 내용을 정리하고 난 뒤 새로운 effect가 동작하도록 할 떄 사용된다..\r\n    이전 effect가 남아있는 상태에서 새로운 effect가 발생하게 되면\r\n    마운트 해제가 일어나고 나서도 메모리 누수나 출동이 발생할 가능성이 있다.\r\n*/\r\n\r\nconst Timer = () => {\r\n\r\n    useEffect(()=>{\r\n        console.log(\"타이머가 시작됨..\");\r\n        <h1></h1>\r\n        const timer = setInterval(()=>{\r\n            console.log(new Date().toLocaleTimeString());\r\n        },(1000));\r\n\r\n        return (()=>{\r\n            clearInterval(timer); //끝나는시점에 한다?\r\n            console.log(\"타이머 끝남\");\r\n        }\r\n    )\r\n    },[])\r\n\r\n    return <h1>타이머를 시작합니다..</h1>\r\n}\r\n\r\n\r\n\r\n\r\nexport const Container = ()=>{\r\n    const [isTrue,setIsTure] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <button onClick={()=>{setIsTure(!isTrue)}}>타이머 토글</button>\r\n            {isTrue && <Timer/>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n"],"mappings":";;;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAAQC,SAAS,QAAO,OAAO;;AAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AASA,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhBN,SAAS,CAAC,MAAI;IACVO,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,aAAAN,OAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;IACT,MAAMC,KAAK,GAAGC,WAAW,CAAC,MAAI;MAC1BP,OAAO,CAACC,GAAG,CAAC,IAAIO,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;IAChD,CAAC,EAAE,IAAK,CAAC;IAET,OAAQ,MAAI;MACRC,aAAa,CAACJ,KAAK,CAAC,CAAC,CAAC;MACtBN,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACzB,CAAC;EAEL,CAAC,EAAC,EAAE,CAAC;EAEL,oBAAON,OAAA;IAAAgB,QAAA,EAAI;EAAY;IAAAT,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAChC,CAAC;AAAAN,EAAA,CAjBKD,KAAK;AAAAc,EAAA,GAALd,KAAK;AAsBX,OAAO,MAAMe,SAAS,GAAGA,CAAA,KAAI;EAAAC,GAAA;EACzB,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAE1C,oBACIG,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACIhB,OAAA;MAAQsB,OAAO,EAAEA,CAAA,KAAI;QAACD,SAAS,CAAC,CAACD,MAAM,CAAC;MAAA,CAAE;MAAAJ,QAAA,EAAC;IAAM;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzDU,MAAM,iBAAIpB,OAAA,CAACG,KAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eACrB,CAAC;AAEX,CAAC;AAAAS,GAAA,CATYD,SAAS;AAAAK,GAAA,GAATL,SAAS;AAAA,IAAAD,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}