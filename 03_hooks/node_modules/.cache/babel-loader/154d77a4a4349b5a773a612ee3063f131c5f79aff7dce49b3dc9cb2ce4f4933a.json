{"ast":null,"code":"var _jsxFileName = \"C:\\\\20240801-gangnam\\\\07_REACT\\\\03_hooks\\\\src\\\\06_useContext\\\\02_useContext.js\",\n  _s = $RefreshSig$();\n/*\r\n    context 는 react 컴포넌트 트리 안에서 전역적으로 데이터를 공유할 수 있도록\r\n    고안된 방법이다 .. 트리 구조가 복잡해 질수록 하위 컴포넌트로 props를 전달하는\r\n    양이 많아지고 , 그러면 유지보수와 코드 가독성에 악영향을 준다..\r\n\r\n    하지만 context를 사용하면 중간컴포넌트 들에게 porps를 넘겨주지 않아도 되고\r\n    유지보수도 수월해지게 된다..\r\n    단, context를 사용하면 컴포넌트를 재사용하기 어려워지기 때문에\r\n    꼭 필요할 때 써야한다\r\n    따라서 때에 따라서는 comtext보다 props가 더 간단한 해결책이 될 수 있다.\r\n*/\n\nimport { createContext } from \"react\";\nimport { Styles } from \"./style\";\n\n// 컨텍스트 생성 별도의 저장소를 만듦\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkModeContext = /*#__PURE__*/createContext(null);\nconst Header = () => {\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    style: {\n      ...Styles.header,\n      backgroundColor: isDark ? \"black\" : \"lightgray\",\n      color: isDark ? \"white \" : \"black\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Props!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = Header;\nconst Content = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      ...Styles.content,\n      backgroundColor: isDark ? \"gray\" : \"white\",\n      color: isDark ? \"white\" : \"black\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB0B4\\uC6A9\\uC785\\uB2C8\\uB2E4..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Content;\nconst Footer = () => {\n  const toggleHandler = () => setIsDark(!isDark);\n  return /*#__PURE__*/_jsxDEV(\"footer\", {\n    style: {\n      ...Styles.footer,\n      backgroundColor: isDark ? \"black\" : \"lightgray\",\n      color: isDark ? \"white\" : \"black\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleHandler,\n      children: isDark ? \"Light Mode\" : \"Dark Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_c3 = Footer;\nconst Page = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      ...Styles.page // 하나로 들어갈수있게 펼침\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_c4 = Page;\nconst ContextContainer = () => {\n  _s();\n  const [isDark, setIsDark] = useState(false);\n  return /*#__PURE__*/_jsxDEV(DarkModeContext.Provider, {\n    value: {\n      isDark,\n      setIsDark\n    },\n    children: /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextContainer, \"9u7BFUG2o84YaRzCLTeO69LH5dw=\");\n_c5 = ContextContainer;\nexport default ContextContainer;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"Footer\");\n$RefreshReg$(_c4, \"Page\");\n$RefreshReg$(_c5, \"ContextContainer\");","map":{"version":3,"names":["createContext","Styles","jsxDEV","_jsxDEV","DarkModeContext","Header","style","header","backgroundColor","isDark","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Content","content","_c2","Footer","toggleHandler","setIsDark","footer","onClick","_c3","Page","page","_c4","ContextContainer","_s","useState","Provider","value","_c5","$RefreshReg$"],"sources":["C:/20240801-gangnam/07_REACT/03_hooks/src/06_useContext/02_useContext.js"],"sourcesContent":["/*\r\n    context 는 react 컴포넌트 트리 안에서 전역적으로 데이터를 공유할 수 있도록\r\n    고안된 방법이다 .. 트리 구조가 복잡해 질수록 하위 컴포넌트로 props를 전달하는\r\n    양이 많아지고 , 그러면 유지보수와 코드 가독성에 악영향을 준다..\r\n\r\n    하지만 context를 사용하면 중간컴포넌트 들에게 porps를 넘겨주지 않아도 되고\r\n    유지보수도 수월해지게 된다..\r\n    단, context를 사용하면 컴포넌트를 재사용하기 어려워지기 때문에\r\n    꼭 필요할 때 써야한다\r\n    따라서 때에 따라서는 comtext보다 props가 더 간단한 해결책이 될 수 있다.\r\n*/\r\n\r\nimport { createContext } from \"react\";\r\nimport { Styles } from \"./style\";\r\n\r\n// 컨텍스트 생성 별도의 저장소를 만듦\r\nconst DarkModeContext = createContext(null);\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header style={{...Styles.header,\r\n            backgroundColor : isDark? \"black\" : \"lightgray\",\r\n            color : isDark? \"white \" : \"black\"\r\n        }}>\r\n            <h1>Welcome to Props!</h1>\r\n        </header>\r\n    )\r\n}\r\nconst Content = () => {\r\n    return (\r\n        <div style={{...Styles.content,\r\n            backgroundColor : isDark? \"gray\" : \"white\",\r\n            color : isDark? \"white\" : \"black\"\r\n        }}>\r\n            <p>내용입니다..</p>\r\n        </div>\r\n    )\r\n}\r\nconst Footer = () =>{\r\n    const toggleHandler = ()=> setIsDark(!isDark);\r\n    return (\r\n        <footer style={{...Styles.footer,\r\n                        backgroundColor:isDark?\"black\":\"lightgray\",\r\n                        color:isDark?\"white\":\"black\"\r\n        }}>\r\n            <button onClick={toggleHandler}>\r\n               {isDark? \"Light Mode\" : \"Dark Mode\"} \r\n            </button>\r\n        </footer>\r\n    )\r\n}\r\nconst Page = () => {\r\n\r\n    \r\n\r\n    return (\r\n        <div style={{\r\n            ...Styles.page  // 하나로 들어갈수있게 펼침\r\n        }}>\r\n            <Header/>\r\n            <Content/>\r\n            <Footer />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst ContextContainer = () => {\r\n    const [isDark,setIsDark] = useState(false);\r\n\r\n    return (\r\n        <DarkModeContext.Provider value={{isDark,setIsDark}}> \r\n        {/*const DarkModeContext = createContext(null);이사이에있는거 다 저거 쓸수있게끔함*/}\r\n            <Page/>\r\n        </DarkModeContext.Provider>\r\n    )\r\n}\r\nexport default ContextContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}