{"ast":null,"code":"var _jsxFileName = \"C:\\\\20240801-gangnam\\\\07_REACT\\\\03_hooks\\\\src\\\\04_useCallback\\\\02_function-memoization.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n/*\r\n    useMemo :\r\n    특정 값을 메모이제이션한다..\r\n    주로 연산이 비싼 값이나 복잡한 계산..\r\n    사용 목적은 값이 자주 계산되는 것을 방지하여 성능 최적화..\r\n\r\n    useCallback : \r\n    특정 함수를 메모이제이션한다.. 함수의 재생성을 방지한다..\r\n    자식 컴포넌트에 함수를 전달할 때 불필요하게 함수가 재생성되는 것을 방지한다..\r\n\r\n    useCallback 을 많은 함수에 남용하면 오히려 성능 저하가 발생할 수 있다...\r\n    함수의 재생성에 큰 비용이 없는 경우 굳이 사용할 필요는 없다..\r\n\r\n\r\n*/\n\nexport const FunctionMemoization = () => {\n  _s();\n  const [number, setNumber] = useState(0);\n  const [toggle, setToggle] = useState(false);\n  const noneCallback = () => {\n    console.log(number);\n  };\n  const printNumber = uesCallback(() => {\n    console.log(`current number : ` + number);\n  }, [number]);\n  useEffect(() => {\n    console.log(\"printNumber 값이 변화 인지됨\");\n  }, [printNumber]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: number,\n      onChange: e => setNumber(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setToggle(r => !r),\n      children: String(toggle)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: printNumber,\n      children: \"printNumberState\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: noneCallback,\n      children: \"noneCallback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FunctionMemoization, \"l1OwJL88t8ElJkNkW51WPV2/L2I=\");\n_c = FunctionMemoization;\nvar _c;\n$RefreshReg$(_c, \"FunctionMemoization\");","map":{"version":3,"names":["FunctionMemoization","_s","number","setNumber","useState","toggle","setToggle","noneCallback","console","log","printNumber","uesCallback","useEffect","_jsxDEV","_Fragment","children","type","value","onChange","e","parseInt","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","r","String","_c","$RefreshReg$"],"sources":["C:/20240801-gangnam/07_REACT/03_hooks/src/04_useCallback/02_function-memoization.js"],"sourcesContent":["/*\r\n    useMemo :\r\n    특정 값을 메모이제이션한다..\r\n    주로 연산이 비싼 값이나 복잡한 계산..\r\n    사용 목적은 값이 자주 계산되는 것을 방지하여 성능 최적화..\r\n\r\n    useCallback : \r\n    특정 함수를 메모이제이션한다.. 함수의 재생성을 방지한다..\r\n    자식 컴포넌트에 함수를 전달할 때 불필요하게 함수가 재생성되는 것을 방지한다..\r\n\r\n    useCallback 을 많은 함수에 남용하면 오히려 성능 저하가 발생할 수 있다...\r\n    함수의 재생성에 큰 비용이 없는 경우 굳이 사용할 필요는 없다..\r\n\r\n\r\n*/\r\n\r\nexport const FunctionMemoization = () => {\r\n\r\n    const [number,setNumber] = useState(0);\r\n    const [toggle,setToggle] = useState(false);\r\n\r\n    const noneCallback = () => {\r\n        console.log(number);\r\n    }\r\n    const printNumber = uesCallback(()=>{\r\n        console.log(`current number : ` + number);\r\n    },[number]);\r\n\r\n    useEffect(()=>{\r\n        console.log(\"printNumber 값이 변화 인지됨\")\r\n\r\n    },[printNumber])\r\n\r\n    return (\r\n        <>\r\n            <input type=\"number\" value={number} onChange={e=>setNumber(parseInt(e.target.value))}/>\r\n\r\n            <br/>\r\n            <button onClick={()=>setToggle(r=>!r)}>{String(toggle)}</button>\r\n            <br/>\r\n            <button onClick={printNumber}>printNumberState</button>\r\n            <button onClick={noneCallback}>noneCallback</button>\r\n        </>\r\n    )\r\n\r\n}"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAErC,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;EACtC,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAE1C,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACvBC,OAAO,CAACC,GAAG,CAACP,MAAM,CAAC;EACvB,CAAC;EACD,MAAMQ,WAAW,GAAGC,WAAW,CAAC,MAAI;IAChCH,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAGP,MAAM,CAAC;EAC7C,CAAC,EAAC,CAACA,MAAM,CAAC,CAAC;EAEXU,SAAS,CAAC,MAAI;IACVJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EAExC,CAAC,EAAC,CAACC,WAAW,CAAC,CAAC;EAEhB,oBACIG,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACIF,OAAA;MAAOG,IAAI,EAAC,QAAQ;MAACC,KAAK,EAAEf,MAAO;MAACgB,QAAQ,EAAEC,CAAC,IAAEhB,SAAS,CAACiB,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAEvFZ,OAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLZ,OAAA;MAAQa,OAAO,EAAEA,CAAA,KAAIpB,SAAS,CAACqB,CAAC,IAAE,CAACA,CAAC,CAAE;MAAAZ,QAAA,EAAEa,MAAM,CAACvB,MAAM;IAAC;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAChEZ,OAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLZ,OAAA;MAAQa,OAAO,EAAEhB,WAAY;MAAAK,QAAA,EAAC;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvDZ,OAAA;MAAQa,OAAO,EAAEnB,YAAa;MAAAQ,QAAA,EAAC;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACtD,CAAC;AAGX,CAAC;AAAAxB,EAAA,CA7BYD,mBAAmB;AAAA6B,EAAA,GAAnB7B,mBAAmB;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}